services:
  db_pg:
    image: postgres:latest
    environment:
      POSTGRES_DB: myvet
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: pg_isready -U postgres
      interval: 10s
      timeout: 30s
      retries: 3
      start_period: 30s
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - backend
    restart: unless-stopped

  api:
    build:
      context: ./backend/myvet
      dockerfile: Dockerfile
    image: ghcr.io/tqs-myvet/myvet_backend:${TAG:-latest}
    ports:
      - "8080:8080"
    depends_on:
      db_pg:
        condition: service_healthy 
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.application.name":"myvet",
        "spring.datasource.url":"jdbc:postgresql://db_pg:5432/postgres",
        "spring.datasource.username":"${POSTGRES_USER}",
        "spring.datasource.password":"${POSTGRES_PASSWORD}",
        "spring.datasource.driver-class-name":"org.postgresql.Driver",
        "spring.jpa.hibernate.ddl-auto":"update",
        "spring.mail.host":"smtp.gmail.com",
        "spring.mail.port":"587",
        "spring.mail.username":"myvetclinicavet@gmail.com",
        "spring.mail.password":"${MAIL_PASSWORD}",
        "spring.mail.properties.mail.smtp.auth":"true",
        "spring.mail.properties.mail.smtp.starttls.enable":"true"
        }' 
    networks:
      - backend
    restart: unless-stopped
  
  admin_web:
    build:
      context: ./web_ui/admin_interface
      dockerfile: Dockerfile
    image: ghcr.io/tqs-myvet/myvet_admin:${TAG:-latest}
    ports:
      - "3000:3000"
    volumes:
      - admin_node_modules:/web_app/node_modules
      - ./web_ui/admin_interface:/web_app
    networks:
      - frontend
    restart: unless-stopped

  user_web:
    build:
      context: ./web_ui/user_interface
      dockerfile: Dockerfile
    image: ghcr.io/tqs-myvet/myvet_user:${TAG:-latest}
    ports:
      - "3001:3001"
    volumes:
      - user_node_modules:/web_app/node_modules
      - ./web_ui/user_interface:/web_app
    networks:
      - frontend
    restart: unless-stopped

  digital_signage:
    build:
      context: ./web_ui/digital_signage
      dockerfile: Dockerfile
    image: ghcr.io/tqs-myvet/myvet_digitalsignage:${TAG:-latest}
    ports:
      - "3002:3002"
    volumes:
      - ds_node_modules:/web_app/node_modules
      - ./web_ui/digital_signage:/web_app
    networks:
      - frontend
    restart: unless-stopped

  proxy:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./proxy/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./proxy/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - frontend
      - backend
    restart: unless-stopped
    depends_on:
      - api
      - admin_web
      - user_web
      - digital_signage

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  pg_data:
    driver: local
  ds_node_modules:
    driver: local
  admin_node_modules:
    driver: local
  user_node_modules:
    driver: local